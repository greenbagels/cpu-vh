/*
 * HydroPlugin.c
 *
 *  Created on: Oct 23, 2015
 *      Author: bazow
 */

#include <stdlib.h>
#include <stdio.h> // for printf

// for timing
#include <ctime>
#include <iostream>

//for cornelius, writing freezeout file
#include <fstream>
#include "/home/derek/MEGA/hydro-resources/cpu-vh-with-cornelius/cornelius-c++-1.3/cornelius.cpp" //edit this s.t. it is not system specific

#include "edu/osu/rhic/harness/hydro/HydroPlugin.h"
#include "edu/osu/rhic/trunk/hydro/DynamicalVariables.h"
#include "edu/osu/rhic/harness/lattice/LatticeParameters.h"
#include "edu/osu/rhic/harness/ic/InitialConditionParameters.h"
#include "edu/osu/rhic/harness/hydro/HydroParameters.h"
#include "edu/osu/rhic/harness/io/FileIO.h"
#include "edu/osu/rhic/trunk/ic/InitialConditions.h"
#include "edu/osu/rhic/trunk/hydro/FullyDiscreteKurganovTadmorScheme.h"
#include "edu/osu/rhic/trunk/hydro/EnergyMomentumTensor.h"
#include "edu/osu/rhic/trunk/eos/EquationOfState.h"

#define FREQ 10 //write output to file every FREQ timesteps
#define FOFREQ 3 //find freezeout surface every FOFREQ timesteps

void outputDynamicalQuantities(double t, const char *outputDir, void * latticeParams)
{  
  output(e, t, outputDir, "e", latticeParams);
  output(u->ux, t, outputDir, "ux", latticeParams);
  output(u->uy, t, outputDir, "uy", latticeParams);
  //	output(u->un, t, outputDir, "un", latticeParams);
  output(u->ut, t, outputDir, "ut", latticeParams);
  //	output(q->ttt, t, outputDir, "ttt", latticeParams);
  //	output(q->ttn, t, outputDir, "ttn", latticeParams);
#ifdef PIMUNU
  output(q->pixx, t, outputDir, "pixx", latticeParams);
  output(q->pixy, t, outputDir, "pixy", latticeParams);
  output(q->pixn, t, outputDir, "pixn", latticeParams);
  output(q->piyy, t, outputDir, "piyy", latticeParams);
  output(q->piyn, t, outputDir, "piyn", latticeParams);
  output(q->pinn, t, outputDir, "pinn", latticeParams);
#endif
#ifdef PI
  output(q->Pi, t, outputDir, "Pi", latticeParams);
#endif
  
}

void run(void * latticeParams, void * initCondParams, void * hydroParams, const char *rootDirectory, const char *outputDir)
{
  struct LatticeParameters * lattice = (struct LatticeParameters *) latticeParams;
  struct InitialConditionParameters * initCond = (struct InitialConditionParameters *) initCondParams;
  struct HydroParameters * hydro = (struct HydroParameters *) hydroParams;
  
  /************************************************************************************	\
   * System configuration
	/************************************************************************************/
  int nt = lattice->numProperTimePoints;
  int nx = lattice->numLatticePointsX;
  int ny = lattice->numLatticePointsY;
  int nz = lattice->numLatticePointsRapidity;
  int ncx = lattice->numComputationalLatticePointsX;
  int ncy = lattice->numComputationalLatticePointsY;
  int ncz = lattice->numComputationalLatticePointsRapidity;
  int nElements = ncx * ncy * ncz;
  
  double t0 = hydro->initialProperTimePoint;
  double dt = lattice->latticeSpacingProperTime;
  double dx = lattice->latticeSpacingX;
  double dy = lattice->latticeSpacingY;
  double dz = lattice->latticeSpacingRapidity;
  double e0 = initCond->initialEnergyDensity;
  
  double freezeoutTemperatureGeV = hydro->freezeoutTemperatureGeV;
  const double hbarc = 0.197326938;
  const double freezeoutTemperature = freezeoutTemperatureGeV/hbarc;
  //const double freezeoutEnergyDensity = e0*pow(freezeoutTemperature,4);
  const double freezeoutEnergyDensity = equilibriumEnergyDensity(freezeoutTemperature);
  printf("Grid size = %d x %d x %d\n", nx, ny, nz);
  printf("spatial resolution = (%.3f, %.3f, %.3f)\n", lattice->latticeSpacingX, lattice->latticeSpacingY, lattice->latticeSpacingRapidity);
  printf("freezeout temperature = %.3f [fm^-1] (eF = %.3f [fm^-4])\n", freezeoutTemperature, freezeoutEnergyDensity);
  
  // allocate memory
  allocateHostMemory(nElements);
  
  printf("Initializing cornelius for freezeout finding\n");
  //initialize cornelius for freezeout surface finding
  //see example_4d() in example_cornelius
  //this works only for full 3+1 d simulation? need to find a way to generalize to n+1 d
  //if the user wants to run a boost invar calc. and sets nz=1, will the following code break?
  int dim = 4;
  double *lattice_spacing = new double[dim];
  lattice_spacing[0] = 2.0 * dt;
  lattice_spacing[1] = 2.0 * dx;
  lattice_spacing[2] = 2.0 * dy;
  lattice_spacing[3] = 2.0 * dz;
  //cor.init(dim, freezeoutEnergyDensity, lattice_spacing);
  //change the isovalue to the switching temperature; here it is set to 50 fm^_4 for testing
  Cornelius cor;
  cor.init(dim, 50.0, lattice_spacing);
  printf("cornelius initialized \n");
  //allocate and initilize an array to store the energy density for some time steos
  //it should be four-dim array of energy density values with
  // move this to the allocateHostMemory() function
  //dim 1 for proper time
  //dim 2 for x
  //dim 3 for y
  //dim 4 for rapidity
  
  //make energy_density_evoution array a 1d column packed array for contiguous memory
  //as well as an easier port to GPU; use something like columnMajorLinearIndex() function
  double ****energy_density_evoution = (double ****)malloc((nt+1) * sizeof(double ***));
  for (int it = 0; it < nt+1; it++)
    {
      energy_density_evoution[it] = (double ***)malloc(nx * sizeof(double **));
      for (int ix = 0; ix < nx; ix++)
	{
	  energy_density_evoution[it][ix] = (double **)malloc(ny * sizeof(double *));
	  for (int iy = 0; iy < ny; iy++)
	    {
	      energy_density_evoution[it][ix][iy] = (double *)malloc(nz * sizeof(double));
	    }
	}
    }
  //zero the whole array
  for (int it = 0; it < nt+1; it++)
    {
      for (int ix = 0; ix < nx; ix++)
	{
	  for (int iy = 0; iy < ny; iy++)
	    {
	      for (int iz = 0; iz < nz; iz++)
		{
		  energy_density_evoution[it][ix][iy][iz] = 0.0;
		}
	    }
	}
    }
  //make an array to store all the hydrodynamic variables for FOFREQ time steps
  //to be written to file once the freezeout surface is determined by the critical energy density
  int n_hydro_vars = 16; //u0, u1, u2, u3, e, pi00, pi01, pi02, pi03, pi11, pi12, pi13, pi22, pi23, pi33, Pi
  double *****hydrodynamic_evoution = (double *****)malloc((n_hydro_vars) * sizeof(double ****));
  for (int ivar = 0; ivar < n_hydro_vars; ivar++)
    {
      hydrodynamic_evoution[ivar] = (double ****)malloc((FOFREQ) * sizeof(double ***));
      for (int it = 0; it < FOFREQ; it++)
	{
	  hydrodynamic_evoution[ivar][it] = (double ***)malloc(nx * sizeof(double **));
	  for (int ix = 0; ix < nx; ix++)
	    {
	      hydrodynamic_evoution[ivar][it][ix] = (double **)malloc(ny * sizeof(double *));
	      for (int iy = 0; iy < ny; iy++)
		{
		  hydrodynamic_evoution[ivar][it][ix][iy] = (double *)malloc(nz * sizeof(double));
		}
	    }
	}
    }
  //zero the whole array
  for (int ivar = 0; ivar < n_hydro_vars; ivar++)
    {
      for (int it = 0; it < FOFREQ; it++)
	{
	  for (int ix = 0; ix < nx; ix++)
	    {
	      for (int iy = 0; iy < ny; iy++)
		{
		  for (int iz = 0; iz < nz; iz++)
		    {
		      hydrodynamic_evoution[ivar][it][ix][iy][iz] = 0.0;
		    }
		}
	    }
	}
    }
  printf("storage arrays for energy density and hydrodynamic variables created and zeroed \n");
  
  //this could be put inside a function that reads in energy_density_evoution as argument
  //use exhaustive search for volume elements of the freezeout surface
  //this algorithm only copies the volume element as a n-dim hyperCube
  //which cornelius can examine
  //find a way to make this more compact/readable, and more readily parallelizable
  double ****hyperCube = new double***[2];
  for (int it = 0; it < 2; it++)
    {
      hyperCube[it] = new double**[2];
      for (int ix = 0; ix < 2; ix++)
	{
	  hyperCube[it][ix] = new double*[2];
	  for (int iy = 0; iy < 2; iy++)
	    {
	      hyperCube[it][ix][iy] = new double[2];
	    }
	}
    }
  for (int it = 0; it < 2; it++)
    {
      for (int ix = 0; ix < 2; ix++)
	{
	  for (int iy = 0; iy < 2; iy++)
	    {
	      for(int iz = 0; iz < 2; iz++)
		{
		  hyperCube[it][ix][iy][iz] = 0.0;
		}
	    }
	}
    }
  //open the freezeout surface file
  ofstream freezeoutSurfaceFile;
  //char surfaceFilePath[255];
  //sprintf(surfaceFilePath, "%s/freezeoutSurfaceFile.dat", cli.outputDirectory);
  //freezeoutSurfaceFile.open(surfaceFilePath);
  freezeoutSurfaceFile.open("output/freezeoutSurfaceFile.dat"); //find a way to do this using command line args
  printf("freezeoutSurfaceFile.dat opened\n");
  
  /************************************************************************************	\
   * Fluid dynamic initialization
	/************************************************************************************/
  double t = t0;
  // generate initial conditions
  setInitialConditions(latticeParams, initCondParams, hydroParams, rootDirectory);
  // Calculate conserved quantities
  setConservedVariables(t, latticeParams);
  // impose boundary conditions with ghost cells
  setGhostCells(q,e,p,u,latticeParams);
  
  /************************************************************************************	\
   * Evolve the system in time
	/************************************************************************************/
  int ictr = (nx % 2 == 0) ? ncx/2 : (ncx-1)/2;
  int jctr = (ny % 2 == 0) ? ncy/2 : (ncy-1)/2;
  int kctr = (nz % 2 == 0) ? ncz/2 : (ncz-1)/2;
  int sctr = columnMajorLinearIndex(ictr, jctr, kctr, ncx, ncy);
  
  std::clock_t t1,t2;
  
  double totalTime = 0;
  int nsteps = 0;
  
  // evolve in time
  for (int n = 1; n <= nt+1; ++n)
    {
      // copy variables back to host and write to disk
      if ((n-1) % FREQ == 0) {
	printf("n = %d:%d (t = %.3f),\t (e, p) = (%.3f, %.3f) [fm^-4],\t (T = %.3f [GeV]),\t",
	       n - 1, nt, t, e[sctr], p[sctr], effectiveTemperature(e[sctr])*hbarc);
	outputDynamicalQuantities(t, outputDir, latticeParams);
	// end hydrodynamic simulation if the temperature is below the freezeout temperature
	if(e[sctr] < freezeoutEnergyDensity) {
	  printf("\nReached freezeout temperature at the center.\n");
	  break;
	}
      }
      
      t1 = std::clock();
      rungeKutta2(t, dt, q, Q, latticeParams, hydroParams);
      t2 = std::clock();
      double delta_time = (t2 - t1) / (double)(CLOCKS_PER_SEC / 1000);
      if ((n-1) % FREQ == 0) printf("(Elapsed time: %.3f ms)\n",delta_time);
      totalTime+=delta_time;
      ++nsteps;
      
      //append the energy density to the storage array
      //put this in a function for compactness and readability
      //find a faster way to do this than rewriting all the values
      
      //also append all hydrodynamic variables to a storage array for freezeout info
      for (int ix = 2; ix < nx+2; ix++)
	{
	  for (int iy = 2; iy < ny+2; iy++)
	    {
	      for (int iz = 2; iz < nz+2; iz++)
		{
		  int s = columnMajorLinearIndex(ix, iy, iz, nx+4, ny+4);
		  energy_density_evoution[n-1][ix-2][iy-2][iz-2] = (double)e[s];
		  hydrodynamic_evoution[0][n-1][ix-2][iy-2][iz-2] = (double)(u->ut[s]);
		  hydrodynamic_evoution[1][n-1][ix-2][iy-2][iz-2] = (double)(u->ux[s]);
		  hydrodynamic_evoution[2][n-1][ix-2][iy-2][iz-2] = (double)(u->uy[s]);
		  hydrodynamic_evoution[3][n-1][ix-2][iy-2][iz-2] = (double)(u->un[s]);
		  hydrodynamic_evoution[4][n-1][ix-2][iy-2][iz-2] = (double)(e[s]);
		  hydrodynamic_evoution[5][n-1][ix-2][iy-2][iz-2] = (double)(q->pitt[s]);
		  hydrodynamic_evoution[6][n-1][ix-2][iy-2][iz-2] = (double)(q->pitx[s]);
		  hydrodynamic_evoution[7][n-1][ix-2][iy-2][iz-2] = (double)(q->pity[s]);
		  hydrodynamic_evoution[8][n-1][ix-2][iy-2][iz-2] = (double)(q->pitn[s]);
		  hydrodynamic_evoution[9][n-1][ix-2][iy-2][iz-2] = (double)(q->pixx[s]);
		  hydrodynamic_evoution[10][n-1][ix-2][iy-2][iz-2] = (double)(q->pixy[s]);
		  hydrodynamic_evoution[11][n-1][ix-2][iy-2][iz-2] = (double)(q->pixn[s]);
		  hydrodynamic_evoution[12][n-1][ix-2][iy-2][iz-2] = (double)(q->piyy[s]);
		  hydrodynamic_evoution[13][n-1][ix-2][iy-2][iz-2] = (double)(q->piyn[s]);
		  hydrodynamic_evoution[14][n-1][ix-2][iy-2][iz-2] = (double)(q->pinn[s]);
		  hydrodynamic_evoution[15][n-1][ix-2][iy-2][iz-2] = (double)(q->Pi[s]);
		}
	    }
	}
      //append all the hydrodynamic variables to the storage array
      
      setCurrentConservedVariables();
      if (n % FOFREQ ==0)
	{
	  //we first perform an exhaustive search for neighboring cells which are above and below
	  //critical energy density, then cornelius finds the surface elements for that volume element
	  //besides writing centroid and normal to file, write all the hydro variables
	  for (int it = 1; it < FOFREQ - 1; it++) //note* avoiding boundary problems (reading outside array)
	    {
	      for (int ix = 1; ix < nx-1; ix++)
		{
		  for (int iy = 1; iy < ny-1; iy++)
		    {
		      for (int iz = 1; iz < nz-1; iz++)
			{
			  //do the search
			  if(
			     ((energy_density_evoution[it-1][ix-1][iy-1][iz-1] < 50.0) && (energy_density_evoution[it+1][ix-1][iy-1][iz-1] > 50.0))
			     || ((energy_density_evoution[it-1][ix-1][iy-1][iz-1] < 50.0) && (energy_density_evoution[it-1][ix+1][iy-1][iz-1] > 50.0))
			     || ((energy_density_evoution[it-1][ix-1][iy-1][iz-1] < 50.0) && (energy_density_evoution[it-1][ix-1][iy+1][iz-1] > 50.0))
			     || ((energy_density_evoution[it-1][ix-1][iy-1][iz-1] < 50.0) && (energy_density_evoution[it-1][ix-1][iy-1][iz+1] > 50.0))
			     )
			    {
			      //write the values of energy density to all corners of the hyperCube
			      hyperCube[0][0][0][0] = energy_density_evoution[it-1][ix-1][iy-1][iz-1];
			      hyperCube[1][0][0][0] = energy_density_evoution[it+1][ix-1][iy-1][iz-1];
			      hyperCube[0][1][0][0] = energy_density_evoution[it-1][ix+1][iy-1][iz-1];
			      hyperCube[0][0][1][0] = energy_density_evoution[it-1][ix-1][iy+1][iz-1];
			      hyperCube[0][0][0][1] = energy_density_evoution[it-1][ix-1][iy-1][iz+1];
			      hyperCube[1][1][0][0] = energy_density_evoution[it+1][ix+1][iy-1][iz-1];
			      hyperCube[1][0][1][0] = energy_density_evoution[it+1][ix-1][iy+1][iz-1];
			      hyperCube[1][0][0][1] = energy_density_evoution[it+1][ix-1][iy-1][iz+1];
			      hyperCube[0][1][1][0] = energy_density_evoution[it-1][ix+1][iy+1][iz-1];
			      hyperCube[0][1][0][1] = energy_density_evoution[it-1][ix+1][iy-1][iz+1];
			      hyperCube[0][0][1][1] = energy_density_evoution[it-1][ix-1][iy+1][iz+1];
			      hyperCube[1][1][1][0] = energy_density_evoution[it+1][ix+1][iy+1][iz-1];
			      hyperCube[1][1][0][1] = energy_density_evoution[it+1][ix+1][iy-1][iz+1];
			      hyperCube[1][0][1][1] = energy_density_evoution[it+1][ix-1][iy+1][iz+1];
			      hyperCube[0][1][1][1] = energy_density_evoution[it-1][ix+1][iy+1][iz+1];
			      hyperCube[1][1][1][1] = energy_density_evoution[it+1][ix+1][iy+1][iz+1];
			      
			      //the freezeout surface file is written in the same format that is read in
			      //by the function read_FOsurfdat_MUSIC() in iS/src/readindata.cpp
			      
			      //note that all hydrodynamic quantities are printed in units of [fm]^(some power)
			      //e.g. energy density is given in units [fm]^-4
			      // need to use hbarc to convert quantites to GeV...
			      
			      //also we need to multiply the elements of the normal vector by appropriate jacobian
			      //factors for milne coordinates!
			      
			      //use cornelius to find the centroid and normal vector of each hyperCube
			      cor.find_surface_4d(hyperCube);
			      //write centroid and normal of each surface element to file
			      for (int i = 0; i < cor.get_Nelements(); i++)
				{
				  //first write the position of the centroid of surface element
				  double cell_tau = t0 + ((double)it) * dt;
				  double cell_x = (double)ix * dx  - (((double)nx) / 2.0 * dx);
				  double cell_y = (double)iy * dy  - (((double)ny) / 2.0 * dy);
				  double cell_z = (double)iz * dz  - (((double)nz) / 2.0 * dz);
				  
				  freezeoutSurfaceFile << cor.get_centroid_elem(i,0) + cell_tau << " ";
				  freezeoutSurfaceFile << cor.get_centroid_elem(i,1) + cell_x << " ";
				  freezeoutSurfaceFile << cor.get_centroid_elem(i,2) + cell_y << " ";
				  freezeoutSurfaceFile << cor.get_centroid_elem(i,3) + cell_z << " ";
				  //then the surface normal element
				  for (int j = 0; j < dim; j++)
				    {
				      freezeoutSurfaceFile << cor.get_normal_elem(i,j) << " ";
				    }
				  //write all the necessary hydro dynamic variables
				  //first write the flow velocity
				  for (int ivar = 0; ivar < 4; ivar++)
				    {
				      freezeoutSurfaceFile << hydrodynamic_evoution[ivar][it][ix][iy][iz] << " ";
				    }
				  //write the energy density
				  freezeoutSurfaceFile << hydrodynamic_evoution[4][it][ix][iy][iz] << " ";
				  //the temperature !this needs to be checked
				  freezeoutSurfaceFile << effectiveTemperature(hydrodynamic_evoution[4][it][ix][iy][iz]) << " ";
				  //the baryon chemical potential, writing zero for now
				  freezeoutSurfaceFile << 0.0 << " ";
				  //the pressure !check this!
				  freezeoutSurfaceFile << equilibriumPressure(hydrodynamic_evoution[4][it][ix][iy][iz]) << " ";
				  //whatever Bn means? !fix this, writing zero for now!
				  freezeoutSurfaceFile << 0.0 << " ";
				  //strangeness chemical potential
				  freezeoutSurfaceFile << 0.0 << " ";
				  //write ten components of pi_(mu,nu) shear viscous tensor
				  for (int ivar = 5; ivar < 15; ivar++)
				    {
				      freezeoutSurfaceFile << hydrodynamic_evoution[ivar][it][ix][iy][iz] << " ";
				    }
				  //write the bulk pressure Pi, and start new line
				  freezeoutSurfaceFile << hydrodynamic_evoution[15][it][ix][iy][iz] << endl;
				}
			      
			    }
			  
			}
		    }
		}
	    }
	}
      
      t = t0 + n * dt;
    }
  printf("Average time/step: %.3f ms\n",totalTime/((double)nsteps));
  
  freezeoutSurfaceFile.close();
  printf("freezeoutSurfaceFile.dat closed\n");
  /************************************************************************************	\
   * Deallocate host memory
	/************************************************************************************/
  freeHostMemory();
  printf("freed host memory\n");
  
  //Deallocate memory used for freezeout finding
  
  for (int it = 0; it < nt+1; it++)
    {
      for (int ix = 0; ix < nx; ix++)
	{
	  for (int iy = 0; iy < ny; iy++)
	    {
	      free(energy_density_evoution[it][ix][iy]);
	    }
	  free(energy_density_evoution[it][ix]);
	}
      free(energy_density_evoution[it]);
    }
  free(energy_density_evoution);
  
  for (int ivar = 0; ivar < n_hydro_vars; ivar++)
    {
      for (int it = 0; it < nt+1; it++)
	{
	  for (int ix = 0; ix < nx; ix++)
	    {
	      for (int iy = 0; iy < ny; iy++)
		{
		  free(hydrodynamic_evoution[ivar][it][ix][iy]);
		}
	      free(hydrodynamic_evoution[ivar][it][ix]);
	    }
	  free(hydrodynamic_evoution[ivar][it]);
	}
      free(hydrodynamic_evoution[ivar]);
    }
  free(hydrodynamic_evoution);
  
  delete [] lattice_spacing;
  
  for (int i1=0; i1 < 2; i1++)
    {
      for (int i2=0; i2 < 2; i2++)
	{
	  for (int i3=0; i3 < 2; i3++)
	    {
	      delete[] hyperCube[i1][i2][i3];
	    }
	  delete[] hyperCube[i1][i2];
	}
      delete[] hyperCube[i1];
    }
  delete[] hyperCube;
  printf("freed variables for freezeout\n");
  
}
